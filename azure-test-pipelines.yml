trigger:
- main

pr:
  drafts: false
  branches:
    include:
      - main

variables:
  - group: iTwin.js non-secret config variables
  - group: iTwin.js Integration Test Users

jobs:

  - job: Node_16_x
    condition: succeeded()
    parameters:
      Node_Version: 16.x
    pool:
      vmImage: ubuntu-latest

    steps:
      - task: NodeTool@0
        displayName: "Use Node ${{ parameters.Node_Version }}"
        inputs:
          versionSpec: "${{ parameters.Node_Version }}"
          checkLatest: true

      - bash: |
          # All of these variables are,
          #   1. Set in the "Variables" tab with a slightly different name (dropped "test" from each one)
          #   2. Use the "Environment Variables" section below, and remapped to a new name
          #   3. Set as the correct name below
          #
          #  This is done so that we can keep the values secret within the build pipeline but then decrypt them in the environment when actually running the tests.
          #   > A better solution would be to figure out how to decrypt in Node itself
          echo "##vso[task.setvariable variable=imjs_test_regular_user_password;]$test_reg_password"
          echo "##vso[task.setvariable variable=USER_WITH_ACCESS_PASSWORD;]$test_reg_password"
        displayName: 'Add config to environment'
        env:
          test_reg_password: $(imjs_regular_user_password)

      - script: npm install
        displayName: 'Install dependencies'

      - script: npm run build
        displayName: 'Build'

      - script: npm run test
        displayName: 'Test'

  - job: Node_14_x
    condition: succeeded()
    parameters:
      Node_Version: 14.x
    pool:
      vmImage: ubuntu-latest

    steps:
      - task: NodeTool@0
        displayName: "Use Node ${{ parameters.Node_Version }}"
        inputs:
          versionSpec: "${{ parameters.Node_Version }}"
          checkLatest: true

      - bash: |
          # All of these variables are,
          #   1. Set in the "Variables" tab with a slightly different name (dropped "test" from each one)
          #   2. Use the "Environment Variables" section below, and remapped to a new name
          #   3. Set as the correct name below
          #
          #  This is done so that we can keep the values secret within the build pipeline but then decrypt them in the environment when actually running the tests.
          #   > A better solution would be to figure out how to decrypt in Node itself
          echo "##vso[task.setvariable variable=imjs_test_regular_user_password;]$test_reg_password"
          echo "##vso[task.setvariable variable=USER_WITH_ACCESS_PASSWORD;]$test_reg_password"
        displayName: 'Add config to environment'
        env:
          test_reg_password: $(imjs_regular_user_password)

      - script: npm install
        displayName: 'Install dependencies'

      - script: npm run build
        displayName: 'Build'

      - script: npm run test
        displayName: 'Test'